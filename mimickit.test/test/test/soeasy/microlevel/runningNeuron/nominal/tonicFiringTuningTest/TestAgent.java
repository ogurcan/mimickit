package test.soeasy.microlevel.runningNeuron.nominal.tonicFiringTuningTest;

import static org.junit.Assert.assertTrue;

import java.util.Vector;

import mimickit.amas.Feedback;
import mimickit.model.FInstantFrequency;
import mimickit.model.SOEASYEnvironment;
import mimickit.model.SOEASYParameters;
import mimickit.model.neuron.Neuron;
import mimickit.model.neuron.RunningNeuron;
import repast.simphony.engine.schedule.ScheduleParameters;
import repast.simphony.engine.schedule.ScheduledMethod;
import repast.simphony.engine.watcher.Watch;
import repast.simphony.engine.watcher.WatcherTriggerSchedule;
import test.mimickit.CooperativeTestAgent;

public class TestAgent extends CooperativeTestAgent {

	// functional agents
	RunningNeuron motorNeuron;

	private Vector<Double> motoneuronDischarges;
	private Vector<Feedback> sentFeedbacks;

	/** INITIALIZATION METHOD **/

	public TestAgent() {
		SOEASYEnvironment agentFactory = SOEASYEnvironment.getInstance();
		motorNeuron = (RunningNeuron) agentFactory.getAgent("Motoneuron");
		motoneuronDischarges = new Vector<Double>();
		sentFeedbacks = new Vector<Feedback>();
	}

	/** STATE MONITORING METHODS **/

	/**
	 * Collects "potential" information from Motor Neuron.
	 */
	@Watch(watcheeClassName = "soeasy.model.neuron.Neuron", watcheeFieldNames = "potential", query = "colocated", triggerCondition = "$watchee.getPotential() > -45", whenToTrigger = WatcherTriggerSchedule.IMMEDIATE)
	public void monitorMotoneuronDischarges(Neuron watcheeNeuron) {
		double currentSpike = SOEASYParameters.getInstance()
				.getCurrentTick();
		if (motoneuronDischarges.size() > 1) {
			double previousSpike = motoneuronDischarges.lastElement();
			double isi = currentSpike - previousSpike;
			double frequency = 1000 / isi;
			// System.out.println("f: " + frequency);
			Feedback feedback = null;
			if (frequency >= 20.0) {
				// if frequency is too HIGH then send a
				// feedback to decrease the frequency to the motoneuron agent.
				feedback = new FInstantFrequency(this, Feedback.DECREASE);
			} else if (frequency < 6.0) {
				// if frequency is too LOW then send a
				// feedback to increase the frequency to the motoneuron agent.
				feedback = new FInstantFrequency(this, Feedback.INCREASE);
			} else {
				// if frequency is OK then send a
				// feedback to say OK about the frequency to the motoneuron
				// agent.
				feedback = new FInstantFrequency(this, Feedback.GOOD);
			}

			if (sendFeedback(motorNeuron, feedback)) {
				sentFeedbacks.add(feedback);
			}
		}
		motoneuronDischarges.add(currentSpike);
	}

	/** TEST METHODS **/

	/**
	 * If the last feedback should be FInstantFrequency.GOOD and it must occur
	 * long before this test method.
	 */
	@ScheduledMethod(start = ScheduleParameters.END, priority = ScheduleParameters.LAST_PRIORITY)
	public void testHandlingOfFInstantFrequency() {
		// there must be feedbacks generated by the TestAgent
		assertTrue(sentFeedbacks.size() > 0);

		// the last feedback should be GOOD
		Feedback lastFeedback = sentFeedbacks.lastElement();
		assertTrue(lastFeedback.isGood());
	}
}
