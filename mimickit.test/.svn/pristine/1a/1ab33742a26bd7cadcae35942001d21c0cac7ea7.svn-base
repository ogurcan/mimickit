package test.soeasy.macrolevel.tbialisanterior;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import rast.AbstractTestAgent;
import repast.simphony.engine.schedule.ScheduleParameters;
import repast.simphony.engine.schedule.ScheduledMethod;
import repast.simphony.engine.watcher.Watch;
import repast.simphony.engine.watcher.WatcherTriggerSchedule;
import soeasy.model.MNDischargeRates;
import soeasy.model.SOEASYEnvironment;
import soeasy.model.SOEASYParameters;
import soeasy.model.Spike;
import soeasy.model.neuron.Neuron;
import soeasy.model.viewer.Viewer;
import soeasy.util.DoubleArrayList;

/**
 * The aim of this test is three-fold: (1) to test the periodic innervation of
 * sensory neuron via wiring viewer, (2) to test whether there is a blind time
 * space in data caused by extracellular fluid or not, and (3) to test both the
 * excitatory and inhibitory effect of sensory neuron on motor neuron by
 * checking H-Reflex in PSTH.
 * 
 * @author Önder Gürcan
 * 
 */
public class TestAgent extends AbstractTestAgent {

	private Neuron afferentNeuron;

	private Neuron motorNeuron;

	private Viewer wiringViewer;

	private DoubleArrayList sensoryNeuronSpikeVector;

	private DoubleArrayList tickVector;

	/** INITIALIZATION METHOD **/

	public TestAgent() {
		afferentNeuron = (Neuron) SOEASYEnvironment.getInstance().getAgent(
				"AfferentNeuron");
		assertNotNull(afferentNeuron);
		motorNeuron = (Neuron) SOEASYEnvironment.getInstance().getAgent(
				"MotorNeuron");
		assertNotNull(motorNeuron);
		wiringViewer = (Viewer) SOEASYEnvironment.getInstance().getAgent(
				"WiringViewer");
		assertNotNull(wiringViewer);
		//
		this.sensoryNeuronSpikeVector = new DoubleArrayList();
		this.tickVector = new DoubleArrayList();
	}

	/** STATE MONITORING METHODS **/

	/**
	 * Collects "potential" information from InterNeuron.
	 */
	@Watch(watcheeClassName = "soeasy.Neuron", watcheeFieldNames = "potential", query = "colocated", whenToTrigger = WatcherTriggerSchedule.IMMEDIATE)
	public void monitorSensoryNeuronResponses(Neuron watcheeNeuron) {
		if (watcheeNeuron.equals(afferentNeuron)) {
			if (watcheeNeuron.getPotential() > Spike.FIRING_THRESHOLD) {
				double currentTime = SOEASYParameters.getInstance()
						.getCurrentTick();
				if (sensoryNeuronSpikeVector.size() == 0) {
					sensoryNeuronSpikeVector.add(currentTime);
				} else {
					double previousSpike = sensoryNeuronSpikeVector
							.lastElement();
					if ((currentTime - previousSpike) > Spike.SPIKE_DURATION) {
						sensoryNeuronSpikeVector.add(currentTime);
					}
				}
			}
		}
	}

	/** TEST METHODS **/

	@ScheduledMethod(start = 1001, interval = 0, priority = ScheduleParameters.LAST_PRIORITY)
	public void testPeriodicExcitationOfMotorNeuron() {
		MNDischargeRates dataSet = SOEASYEnvironment.getInstance().getDataSet();
		DoubleArrayList motorResponseList = dataSet.getMNDischarges(0);
		int motorResponseSize = motorResponseList.size();
		assertEquals(9, motorResponseSize, 1);
	}

	@ScheduledMethod(start = 11, interval = 10000, priority = ScheduleParameters.LAST_PRIORITY)
	public void testOrganizationOfTheNetwork() {
		// afferent neuron
		assertEquals(0, afferentNeuron.getPreSynapses().size());
		assertEquals(1, afferentNeuron.getPostSynapses().size());
		// motor neuron
		assertEquals(1, motorNeuron.getPreSynapses().size());
		assertEquals(1, motorNeuron.getPostSynapses().size());
	}

	@ScheduledMethod(start = 0, interval = 10)
	public void observeExecutionClock() {
		tickVector.add(SOEASYParameters.getInstance().getCurrentTick());
	}

}
