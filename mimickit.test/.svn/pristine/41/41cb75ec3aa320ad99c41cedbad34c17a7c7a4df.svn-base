package test.soeasy.microlevel.restingNeuron.nominal.integrateAndFireTestWithInhibitoryContributor;

import soeasy.model.neuron.RestingNeuron;
import test.soeasy.SOEasyScenarioBuilder;

/**
 * 
 * @author Önder Gürcan
 * 
 */
public class ScenarioBuilder extends SOEasyScenarioBuilder {

	@Override
	protected void createAgents() {
		RestingNeuron restingNeuron = getAgentFactory().createRestingNeuron(
				null, "RestingNeuron", true, 1, 0, 0.55, null);

		FakeNeuron preNeuronExc = new FakeNeuron(true);
		FakeNeuron preNeuronInh = new FakeNeuron(false);
		// synapse1
		getAgentFactory().createSynapse(null, preNeuronExc, restingNeuron, 1.0);
		// synapse2
		getAgentFactory().createSynapse(null, preNeuronExc, restingNeuron, 6.0);
		// synapse3
		getAgentFactory().createSynapse(null, preNeuronExc, restingNeuron, 10.0);
		// synapse4
		getAgentFactory().createSynapse(null, preNeuronExc, restingNeuron, 11.0);
		// synapse5
		getAgentFactory().createSynapse(null, preNeuronExc, restingNeuron, 12.0);
		// synapse6 - Inh
		getAgentFactory().createSynapse(null, preNeuronInh, restingNeuron, 12.0);
		// synapse7
		getAgentFactory().createSynapse(null, preNeuronExc, restingNeuron, 13.0);
		// synapse8
		getAgentFactory().createSynapse(null, preNeuronExc, restingNeuron, 13.0);
		// synapse9
		getAgentFactory().createSynapse(null, preNeuronExc, restingNeuron, 14.0);
		// synapse10
		getAgentFactory().createSynapse(null, preNeuronExc, restingNeuron, 15.0);
		// synapse11
		getAgentFactory().createSynapse(null, preNeuronExc, restingNeuron, 16.0);
	}
}
